* aplig - Always Program with Ligatures (in emacs)

(In-progress)

Indentation-correcting visual replacements of symbols with other symbols.

Alignment and indentation issues hamper ligature's generalization, known as
prettified-symbols in Emacs, from adoption. aplig attempts to bring the joy and
readability of apl to every language!

** Details

Ligatures render consecutive graphemes, or characters, as a single glyph.

Fonts with programming ligatures, like Fira Code, design their ligature glyphs
to have the same width as their constituent characters. The glyphs for >= and ->
take up two spaces.

Matching sizes is not always possible so alignment will break. A simple
example: render ~and~ as ~∧~, its symbol.

#+BEGIN_SRC lisp
(and foo   ; The actual text
     bar)
(∧ foo     ; What we see when working - bar isn't aligned!
     bar)
(∧ foo     ; What we want to see when working...
   bar)
(and foo   ; But now the true indentation is incorrect!
   bar)
#+END_SRC

There are many similar, desirable examples. Like rendering ~alpha~ as ~ɑ~,
~lambda~ as ~λ~, ~for~ as ~∀~, and so on.

*aplig masks indentation*. Our working indentation is visually modified so that
in the example above, we see example 3 while the true text is example 1.

/Note on terminology:/ [[https://helpful.knobs-dials.com/index.php/Morpheme,_Syllable,_Lexeme,_Grapheme,_Phoneme,_Character,_Glyph][graphemes, characters, and glyphs]] can be confusing when
used technically. I understand the least precise definition of ligatures to be
the rendering of consecutive characters as a specific character. Emacs
generalization is ~prettify-symbols~. Note that typical ligatures are not
supported by Emacs display engine and require non-trivial modifications to Emacs
C core.

** FAQ

- Does aplig support all programming languages? :: aplig is major-mode agnostic
     except for two major-mode dependent functions that must calculate
     indentation masks' width and range. I believe this too can be made
     major-mode agnostic, however, a general implementation will be slower, more
     complex and likely more brittle.

- Similar work? :: aplig is a novel extension to pretty-symbols/ligature-concept,
                   which itself has only a counterpart in ~vim-conceal~.

- How does it work? :: By (ab)using particular properties of emacs's ~display~
     and ~modification-hooks~ text properties. Note traditional
     "ligature"/pretty-symbol implementations for Emacs use ~compose-region~.

- aplig breaks XXX :: This project is ambitious and has the potential to clash
     with /many/ different things in /many/ different ways (eg. ~undo-tree~).
     Please see CONTRIBUTING for details on how best to gather information about
     and share your issue.

** Current State

Given ~hello -> ∧~ and ~bye -> !∨~ (a two-character replacement):

[[./img/progress-1.png]]

The text on the left is debugging information showing
~true-indent|masked-indent|contributing-symbols~.

- Doesn't yet recalculate masks on buffer modifications.
  - Insertion almost working, deletion not started.
- Line movement needs to adjust for the indentation masks.
  - In above example, moving point up within a mask also has horizontal
    movement.
- Boundary functions only implemented for lisps and cases remain.
- ... and many more challenges.
