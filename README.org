* aplig - Always Program with Ligatures (in emacs)

(In-progress)

Indentation-correcting visual replacements of symbols with other symbols.

Ligature's generalization, known as ~prettified-symbols~, can cause alignment
and indentation issues, preventing one from rendering ~for~ as ~∀~ and ~lambda~
as ~λ~ in their code. aplig attempts to bring the joy and readability of APL to
every language!

** Details

Ligatures render consecutive graphemes, or characters, as a single glyph.

Fonts with programming ligatures, like Fira Code, design their ligature glyphs
to have the same width as their constituent characters. The glyphs for >= and ->
take up two spaces.

Matching sizes is not always possible so alignment will break. A simple
example: render ~and~ as ~∧~, its symbol in mathematics.

#+BEGIN_SRC lisp
(and foo   ; The actual text
     bar)
(∧ foo     ; What we see when working - bar isn't aligned!
     bar)
(∧ foo     ; What we want to see when working...
   bar)
(and foo   ; But now the true indentation is incorrect!
   bar)
#+END_SRC

There are many examples: render ~alpha~ as ~ɑ~, ~in~ as ~∈~, ~int~ as ~ℤ~, and
[[https://github.com/Malabarba/Nameless][the "nameless" package]], and so on.

*aplig masks indentation*. Our working indentation is visually modified so that
in the example above, we see example 3 while the true text is example 1.

/Note on terminology:/ [[https://helpful.knobs-dials.com/index.php/Morpheme,_Syllable,_Lexeme,_Grapheme,_Phoneme,_Character,_Glyph][graphemes, characters, ligatures, and glyphs]] can be
confusing when used technically. I understand the least precise definition of
ligatures to be: render consecutive characters as a specific character. I refer
to "prettified-symbols" and "ligatures" interchangeably. There is no practical
difference between the two, as far this work is concerned.

Note that typographic ligatures are not supported natively by Emacs display
engine and require non-trivial modifications to Emacs C core.

** FAQ

- Does aplig support all programming languages? :: Yes-ish.
  - /Details/: aplig is major-mode agnostic except for a fn to calculate the
    range of an indentation mask. This too can be made major-mode agnostic,
    however, a general implementation will be slower, more complex and
    potentially brittle.

- How does it work? :: By (ab)using particular properties of emacs's ~display~
     and ~modification-hooks~ text properties.
  - /Details/: My approach [[https://old.reddit.com/r/emacs/comments/74jni0/fixing_ligature_indentation_proof_of_concept/][has received 'praise' from Emac's current maintainer]]:
    "Using display properties and overlay strings to "fix" what the display
    engine does is *fundamentally wrong*, and is not what these features were
    designed for."

    aplig attempts to so egregiously abuse Emac's display engine that a skilled
    user cannot help themselves but to correct me (by extending Emac's C display
    engine with indentation metrics smarter than fixed-width columns).

    I'm speaking in jest - this project would complement, not be made obsolete,
    by an extension of Emac's indentation engine and native ligature support.

- Similar work? :: aplig is a novel extension of ~prettify-symbols~, which itself
                   has only a counterpart in ~vim-conceal~. Note aplig is
                   self-contained and doesn't/can't use Emac's
                   ~prettify-symbols-mode~.

- Contributing? :: Would be greatly appreciated! Non-coding materials like
                   images, screencasts, and other examples are useful and
                   exciting. For contributing code and raising issues, see
                   CONTRIBUTING.

** status

Given ~hello -> ∧~ and ~bye -> !∨~ (a two-character replacement):

[[./img/progress-1.png]]

The text on the left is debugging information showing
~true-indent|spaces-masked|#-symbols-contributing-to-mask~.

- Doesn't yet recalculate masks on buffer modifications.
  - Insertion almost working, deletion not started.
- Line movement needs to adjust for the indentation masks.
  - In above example, moving point up within a mask also has horizontal
    movement.
- Boundary functions only implemented for lisps and cases remain.
- ... and many more challenges.
