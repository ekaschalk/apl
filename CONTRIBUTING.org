#+TITLE: Contributing to aplig


aplig needs and appreciates contributors!

This document will be fleshed out closer to a alpha/beta release.

* Contributing
** Issues
** Code

There are several conventions I'd like to maintain, enumerated here.

Most are just my takes on maintaining a clean emacs-lisp project in spite of no
namespaces and aren't hard-set.

*** Code

- Name your functions: ~aplig-[module-name](s)--my-func~
  - ~aplig-mask--init~ and ~aplig-masks--init~.

- Predicates should have ~?~ appended, not ~-p~.
  - ~aplig-mask--empty?~

- Organize with outlines (;;; comments) when it is reasonable.
  - aplig-mask.el's ~;;; Predicates~ contains all predicates operating on masks.

- Insert a form feed and newline before any top-level outline (3-asterisks), if
  your PR contains a new outline section.
  - Done via ~C-x 8 RET~ (~insert-char~) and selecting ~FORM FEED~.
    - This is not a [[http:http://ergoemacs.org/emacs/modernization_formfeed.html][universal convention]]. However, combined with an outline (I
      markup with [[https://github.com/ekaschalk/.spacemacs.d/tree/master/layers/display/local/pretty-outlines][pretty-outlines]]), this is the best solution, if stylistic,
      I've found to organizing and visually separating emacs-lisp code blocks
      (and for that matter, all code blocks).

*** Tests

- Name tests ~[module]:[outline]:my-test~
  - ~ligs:overlays:access-by-line~
